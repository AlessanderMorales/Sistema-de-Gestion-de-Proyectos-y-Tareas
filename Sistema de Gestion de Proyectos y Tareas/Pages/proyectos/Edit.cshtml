@page "{id:int}"
@model Sistema_de_Gestion_de_Proyectos_y_Tareas.Pages.Proyectos.EditModel
@{
    ViewData["Title"] = "Editar Proyecto";
}

<style>
    :root {
        --accent-red: #D32F2F;
        --accent-orange: #FF5722;
        --accent-gold: #FFD700;
        --text-primary: #f5f5f7;
    }

    .title-volcanic {
        background: linear-gradient(45deg, var(--accent-gold), var(--accent-orange));
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        font-weight: 700;
        border-bottom: 2px solid rgba(255,255,255,0.1);
        padding-bottom: 0.5rem;
        margin-bottom: 2rem;
    }

  .form-control, .form-select {
background-color: #3a3a40;
     color: var(--text-primary);
        border: 1px solid #555;
  border-radius: 8px;
        padding: 0.75rem 1rem;
    }
    .form-control:focus, .form-select:focus {
        background-color: #4a4a50;
        color: var(--text-primary);
   border-color: var(--accent-orange);
        box-shadow: 0 0 0 0.25rem rgba(255, 87, 34, 0.3);
    }

    .form-label {
    color: var(--text-primary);
   font-weight: 500;
    }

    .text-danger {
    color: #ff5252 !important;
        font-weight: 500;
    }
  
    .form-container {
   max-width: 700px;
    }

  .btn-volcanic-primary {
    background: linear-gradient(45deg, var(--accent-red), var(--accent-orange));
  border: none;
  color: white;
    font-weight: bold;
   padding: 12px 25px;
        border-radius: 8px;
      transition: all 0.3s ease;
  }
    .btn-volcanic-primary:hover {
        transform: translateY(-2px);
     box-shadow: 0 5px 15px rgba(255, 87, 34, 0.4);
    }

    .btn-volcanic-secondary {
        background-color: transparent;
    border: 2px solid #6c757d;
     color: #ced4da;
   font-weight: bold;
 padding: 10px 25px;
     border-radius: 8px;
      transition: all 0.3s ease;
    }
    .btn-volcanic-secondary:hover {
   background-color: #6c757d;
   color: white;
   border-color: #6c757d;
    }

  .date-format-hint {
font-size: 0.85rem;
        color: #888;
  margin-top: 0.25rem;
        font-style: italic;
    }
</style>

<h1 class="title-volcanic">@ViewData["Title"]</h1>

<div class="row">
    <div class="col-md-8 form-container">
   <form method="post">
    <input type="hidden" asp-for="Proyecto.Id" />
  <div class="mb-3">
     <label asp-for="Proyecto.Nombre" class="form-label"></label>
  <input asp-for="Proyecto.Nombre" class="form-control" />
 <span asp-validation-for="Proyecto.Nombre" class="text-danger"></span>
     </div>
     <div class="mb-3">
     <label asp-for="Proyecto.Descripcion" class="form-label"></label>
    <textarea asp-for="Proyecto.Descripcion" class="form-control" rows="4"></textarea>
         <span asp-validation-for="Proyecto.Descripcion" class="text-danger"></span>
 </div>
         <div class="row">
            <div class="col-md-6 mb-3">
     <label asp-for="Proyecto.FechaInicio" class="form-label"></label>
       <!-- ✅ MODIFICADO: Input de texto con formato DD/MM/YYYY -->
         <input asp-for="Proyecto.FechaInicio" 
           class="form-control fecha-input" 
      type="text" 
         placeholder="DD/MM/YYYY" 
        maxlength="10" 
  id="fechaInicioInput"
    value="@Model.Proyecto.FechaInicio.ToString("dd/MM/yyyy")" />
   <div class="date-format-hint">Formato: DD/MM/YYYY</div>
  <span asp-validation-for="Proyecto.FechaInicio" class="text-danger"></span>
           </div>
      <div class="col-md-6 mb-3">
     <label asp-for="Proyecto.FechaFin" class="form-label"></label>
      <!-- ✅ MODIFICADO: Input de texto con formato DD/MM/YYYY -->
      <input asp-for="Proyecto.FechaFin" 
        class="form-control fecha-input" 
   type="text" 
   placeholder="DD/MM/YYYY" 
   maxlength="10" 
       id="fechaFinInput"
          value="@Model.Proyecto.FechaFin.ToString("dd/MM/yyyy")" />
  <div class="date-format-hint">Formato: DD/MM/YYYY</div>
  <span asp-validation-for="Proyecto.FechaFin" class="text-danger"></span>
     </div>
     </div>
     <div class="mt-4">
   <button type="submit" class="btn btn-volcanic-primary">Actualizar Cambios</button>
    <a asp-page="Index" class="btn btn-volcanic-secondary ms-2">Cancelar</a>
      </div>
    </form>
    </div>
</div>

@section Scripts {
    @{
  await Html.RenderPartialAsync("_ValidationScriptsPartial");
 }
 
 <script>
    document.addEventListener('DOMContentLoaded', function () {
  const fechaInicioInput = document.querySelector('#fechaInicioInput');
 const fechaFinInput = document.querySelector('#fechaFinInput');
        const form = document.querySelector('form');

    // ✅ MODIFICADO: Inicializar Flatpickr con calendario mostrando la fecha pre-cargada o el mes actual
    flatpickr(fechaInicioInput, {
      dateFormat: "d/m/Y",
        locale: "es",
   allowInput: true,
    altInput: false,
        disableMobile: false,
    // Flatpickr automáticamente usa el value del input como defaultDate
        // Si el campo tiene valor, muestra ese mes; si está vacío, muestra el mes actual
 onChange: function(selectedDates, dateStr, instance) {
      const errorSpan = fechaInicioInput.parentElement.querySelector('.text-danger');
    if (errorSpan) errorSpan.textContent = '';
      fechaInicioInput.classList.remove('is-invalid');
   
     // Actualizar fecha mínima del campo de fecha fin
         if (selectedDates.length > 0) {
     const fechaFinPicker = document.querySelector('#fechaFinInput')._flatpickr;
     if (fechaFinPicker) {
 fechaFinPicker.set('minDate', selectedDates[0]);
      }
            }
        }
    });

    flatpickr(fechaFinInput, {
     dateFormat: "d/m/Y",
        locale: "es",
    allowInput: true,
      altInput: false,
        disableMobile: false,
        // Flatpickr automáticamente usa el value del input como defaultDate
   onChange: function(selectedDates, dateStr, instance) {
    const errorSpan = fechaFinInput.parentElement.querySelector('.text-danger');
     if (errorSpan) errorSpan.textContent = '';
      fechaFinInput.classList.remove('is-invalid');
}
    });

    // Establecer fecha mínima inicial si hay fecha de inicio pre-cargada
    if (fechaInicioInput.value) {
  const fechaInicioPicker = fechaInicioInput._flatpickr;
  const fechaFinPicker = fechaFinInput._flatpickr;
        
   if (fechaInicioPicker && fechaFinPicker) {
     const fechaInicio = fechaInicioPicker.selectedDates[0];
   if (fechaInicio) {
            fechaFinPicker.set('minDate', fechaInicio);
      }
}
    }

 // ✅ Validar formato DD/MM/YYYY
    function validarFormatoFecha(fecha) {
if (!fecha) return true;
        
const regex = /^(\d{2})\/(\d{2})\/(\d{4})$/;
if (!regex.test(fecha)) return false;

     const [, dia, mes, año] = regex.exec(fecha);
        const d = parseInt(dia, 10);
 const m = parseInt(mes, 10);
    const a = parseInt(año, 10);
      
  if (m < 1 || m > 12) return false;
if (d < 1 || d > 31) return false;
 
        const diasPorMes = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    if (a % 4 === 0 && (a % 100 !== 0 || a % 400 === 0)) diasPorMes[1] = 29;
        
        return d <= diasPorMes[m - 1];
}

// ✅ Convertir DD/MM/YYYY a Date
    function parsearFecha(fechaStr) {
 const [dia, mes, año] = fechaStr.split('/').map(Number);
  return new Date(año, mes - 1, dia);
    }

     // ✅ Validación de fechas en el submit
  form.addEventListener('submit', function (event) {
     const inicioStr = fechaInicioInput.value;
  const finStr = fechaFinInput.value;
const errorSpanInicio = fechaInicioInput.parentElement.querySelector('.text-danger');
 const errorSpanFin = fechaFinInput.parentElement.querySelector('.text-danger');

   if (errorSpanInicio) errorSpanInicio.textContent = '';
     if (errorSpanFin) errorSpanFin.textContent = '';
    
     if (inicioStr && !validarFormatoFecha(inicioStr)) {
   event.preventDefault();
 if (errorSpanInicio) {
 errorSpanInicio.textContent = 'Formato de fecha inválido. Use DD/MM/YYYY';
   }
      fechaInicioInput.classList.add('is-invalid');
    return;
    }

     if (finStr && !validarFormatoFecha(finStr)) {
        event.preventDefault();
    if (errorSpanFin) {
  errorSpanFin.textContent = 'Formato de fecha inválido. Use DD/MM/YYYY';
 }
  fechaFinInput.classList.add('is-invalid');
  return;
        }

if (inicioStr && finStr) {
  const inicio = parsearFecha(inicioStr);
const fin = parsearFecha(finStr);
     
          if (fin < inicio) {
      event.preventDefault();
  if (errorSpanFin) {
   errorSpanFin.textContent = 'La fecha de finalización no puede ser anterior a la fecha de inicio.';
     }
 fechaFinInput.classList.add('is-invalid');
         } else if (fin.getTime() === inicio.getTime()) {
      event.preventDefault();
  if (errorSpanFin) {
      errorSpanFin.textContent = 'La fecha de finalización no puede ser igual a la fecha de inicio.';
 }
  fechaFinInput.classList.add('is-invalid');
  }
        }
    });
    });
 </script>
}